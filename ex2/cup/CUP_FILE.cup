/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*******************************/
/* 			TERMINALS          */
/*******************************/
/* --------- Operators --------*/
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LT;
terminal GT;
terminal ASSIGN;

/* ---------- */

terminal IF;
terminal WHILE;

terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;

terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal ID;
terminal ARRAY;
terminal EXTENDS;
terminal NEW;
terminal COMMA;
terminal RETURN;
terminal NIL;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal Program;
non terminal dec;
non terminal type;
non terminal arrayTypedef;
non terminal varDec;
non terminal funcDec;
non terminal classDec;

non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal newExp;
non terminal cField;
non terminal BINOP;


/***************************/
/* PRECEDENCE DECLARATIONS */
/***************************/

precedence ASSIGN;
precedence EQ;
precedence left LT;
precedence left GT;

/* OPERATOR PRECEDENCE */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/*       ---         */

precedence LBRACK;
precedence LPAREN;
precedence left DOT;



/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program     ::=     dec+;

dec         ::=     varDec
					| funcDec
					| classDec
					| arrayTypedef
					;

type        ::= 	TYPE_INT
					| TYPE_STRING
					| TYPE_VOID
					| ID
					;


/* -------------- check !!!! -------------------*/

arrayTypedef::=		ARRAY ID = type LBRACK RBRACK;

/* -------------------------------------------- */

varDec      ::= 	type ID [ ASSIGN exp ] SEMICOLON
					| type ID ASSIGN newExp SEMICOLON
					;

funcDec 	::= 	type ID LPAREN [ type ID [ COMMA type ID]* ] RPAREN LBRACE stmt [stmt]* RBRACE;

classDec    ::=     CLASS ID [ EXTENDS ID ] LBRACE cField [cField]* RBRACE;

exp			::=		var
					| LPAREN exp RPAREN
					|  exp BINOP exp
					| [ var DOT ] ID LPAREN [ exp [ COMMA exp]* ] RPAREN
					| [ MINUS ] INT
					| NIL
					| STRING
					;


var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| var ASSIGN newExp SEMICOLON
					| RETURN [exp] SEMICOLON
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| [var COMMA] ID LPAREN [ exp [ COMMA exp ]* ] RPAREN SEMICOLON;
					;

newExp		::= 	NEW ID 
					| NEW ID LBRACK exp RBRACK
					;


cField		::=		varDec
					| funcDec
					;

BINOP       ::=     PLUS
					| MINUS
					| TIMES
					| DIVIDE
					| LT
					| GT
					| EQ
					;

