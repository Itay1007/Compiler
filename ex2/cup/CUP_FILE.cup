/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;


parser code 
{:
	public Lexer lexer;
	private PrintWriter file_writer;

	static public final int PARSING_ERROR = 0;
	static public final int LEXICAL_ERROR = 1;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	public Parser(Lexer lexer, PrintWriter file_writer)
	{
		this(lexer); // calls the above constructor.
		this.file_writer = file_writer;
	}

	public void syntax_error(Symbol curr_token)
	{	
		/* We get here when there was a syntax error */

		int err_line  = lexer.getLine();

		report_error("ERROR" + "(" + err_line + ")", PARSING_ERROR);
	}

	public void report_error(String message, Object info)
	{
		if ((int) info == PARSING_ERROR){

			/* error is syntactic (we were called from the 'syntax_error' method */

			System.out.print("Parsing ");
			
		}
		else{
			/* error is lexical */

			System.out.print("Lexical ");
		}

		System.out.println("Error at " + "[" + lexer.getLine() + ":" + lexer.getTokenStartPosition() + "]");

		file_writer.print(message);
		file_writer.close();

		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	try{
		Symbol s;
		s = lexer.next_token();

		System.out.println(TokenNames.terminalNames[s.sym]);

		return s;
	}	
	catch(Throwable e)
	{	
		report_error("ERROR", LEXICAL_ERROR);
	}

	// Won't get here
	return null;	
:};

/*******************************/
/* 			TERMINALS          */
/*******************************/

/* --------- Operators --------*/
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LT;
terminal GT;
terminal ASSIGN;

/* ---------- */

terminal IF;
terminal WHILE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal NIL;
terminal COMMA;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal TYPE_STRING;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;


/*****************/
/* NON TERMINALS */
/*****************/

non terminal AST_PROGRAM Program;
non terminal AST_DEC_LIST decList; 
non terminal AST_DEC dec;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_ARRAYTYPEDEF arrayTypedef;
non terminal AST_TYPE type;
non terminal AST_EXP exp;
non terminal AST_NEWEXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_STMT_LIST stmtList;
non terminal AST_EXP_LIST expList;
non terminal AST_TYPE_LIST typeList;
non terminal AST_STMT stmt;
non terminal AST_VAR var;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program		::=		decList:l				{: RESULT = new AST_PROGRAM(l);    :}
					;

decList		::=		dec:d   decList:l				{: RESULT = new AST_DEC_LIST(d, l);    :}
					| dec:d   						{: RESULT = new AST_DEC_LIST(d, null);    :}
					;

dec			::=		varDec:v				{: RESULT = new AST_DEC(v, 0);    :}
					| funcDec:f				{: RESULT = new AST_DEC(f, 1);    :}
					| classDec:c			{: RESULT = new AST_DEC(c, 2);    :}
					| arrayTypedef:a		{: RESULT = new AST_DEC(a, 3);    :}
					;

type		::=		TYPE_INT		{: RESULT = new AST_TYPE(0, null);    :}
					| TYPE_STRING	{: RESULT = new AST_TYPE(1, null);    :}
					| TYPE_VOID		{: RESULT = new AST_TYPE(2, null);    :}
					| ID:name		{: RESULT = new AST_TYPE(3, name);    :}
					;

arrayTypedef::=		ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON		{: RESULT = new AST_ARRAYTYPEDEF(name,t);    :}
					;

varDec		::=		type:t ID:name SEMICOLON					{: RESULT = new AST_VARDEC_EXP(t, name, null);    :}
					| type:t ID:name ASSIGN exp:e SEMICOLON		{: RESULT = new AST_VARDEC_EXP(t, name, e);    :}
					| type:t ID:name ASSIGN newExp:e SEMICOLON	{: RESULT = new AST_VARDEC_NEWEXP(t, name, e);    :}
					;

funcDec		::=		type:t ID:name LPAREN RPAREN LBRACE stmtList:sl RBRACE				{: RESULT = new AST_FUNCDEC(t, name, null, sl);    :}
					|type:t ID:name LPAREN typeList:tl RPAREN LBRACE stmtList:sl RBRACE	{: RESULT = new AST_FUNCDEC(t, name, tl, sl);    :}
					;

classDec	::=		CLASS ID:name LBRACE cFieldList:cl RBRACE						{: RESULT = new AST_CLASSDEC(name, null, cl);    :}
					| CLASS ID:name1 EXTENDS ID:name2 LBRACE cFieldList:cl RBRACE	{: RESULT = new AST_CLASSDEC(name1, name2, cl);    :}
					;

newExp  	::=		NEW type:t 								{: RESULT = new AST_NEWEXP(t, null);    :}
					| NEW type:t LBRACK exp:e RBRACK			{: RESULT = new AST_NEWEXP(t, e);    :}
					;

cField  	::=		varDec:vd 								{: RESULT = new AST_CFIELD_VARDEC(vd);    :}
					| funcDec:vd 							{: RESULT = new AST_CFIELD_FUNDEC(vd);    :}
					;

cFieldList	::=		cField:c	cFieldList:l		{: RESULT = new AST_CFIELD_LIST(c,l);    :}
					| cField:c						{: RESULT = new AST_CFIELD_LIST(c,null); :}
					;

expList		::=		exp:e COMMA	expList:l		{: RESULT = new AST_EXP_LIST(e,l);    :}
					| exp:e						{: RESULT = new AST_EXP_LIST(e,null); :}
					;

typeList	::=		type:t ID:name COMMA typeList:tl		{: RESULT = new AST_TYPE_LIST(t, name, tl);    :}
					| type:t ID:name						{: RESULT = new AST_TYPE_LIST(t, name, null); :}
					;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;


var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e);	 :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); 	:}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); 	:}
					| varDec:vd													{: RESULT = new AST_STMT_VARDEC(vd); 	:}
					| var:v ASSIGN newExp:ne SEMICOLON							{: RESULT = new AST_STMT_ASSIGN_NEWEXP(v,ne); 	:}
					| RETURN SEMICOLON											{: RESULT = new AST_STMT_RETURN(null); 		:}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN(e); 	:}
					| ID:name LPAREN RPAREN SEMICOLON								{: RESULT = new AST_STMT_FUNCCALL(null, name, null); 	:}
					| var:v DOT ID:name LPAREN RPAREN SEMICOLON						{: RESULT = new AST_STMT_FUNCCALL(v, name, null); 	:}
					| ID:name LPAREN expList:el RPAREN SEMICOLON					{: RESULT = new AST_STMT_FUNCCALL(null, name, el); 	:}
					| var:v DOT ID:name LPAREN expList:el RPAREN SEMICOLON			{: RESULT = new AST_STMT_FUNCCALL(v, name, el); 	:}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i, 0);          :}
					| MINUS INT:i						{: RESULT = new AST_EXP_INT(i, 1);          :}
					| STRING:s							{: RESULT = new AST_EXP_STRING(s);          :}
					| NIL								{: RESULT = new AST_EXP_NIL();          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);		:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);		:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);		:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3);		:}
					| exp:e1 LT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 4);		:}
					| exp:e1 GT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 5);		:}
					| exp:e1 EQ exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 6);		:}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_PARENEXP(e);		:}
					| ID:name LPAREN RPAREN		{: RESULT = new AST_EXP_FUNCCALL(null, name, null);		:}
					| var:v DOT ID:name LPAREN RPAREN		{: RESULT = new AST_EXP_FUNCCALL(v, name, null);		:}
					| ID:name LPAREN expList:el RPAREN		{: RESULT = new AST_EXP_FUNCCALL(null, name, el);		:}
					| var:v DOT ID:name LPAREN expList:el RPAREN		{: RESULT = new AST_EXP_FUNCCALL(v, name, el);		:}
					;
