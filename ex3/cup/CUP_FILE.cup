/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;


parser code 
{:
	public Lexer lexer;
	private PrintWriter file_writer;

	static public final int PARSING_ERROR = 0;
	static public final int LEXICAL_ERROR = 1;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}

	public Parser(Lexer lexer, PrintWriter file_writer)
	{
		this(lexer); // calls the above constructor.
		this.file_writer = file_writer;
	}

	public void syntax_error(Symbol curr_token)
	{	
		/* We get here when there was a syntax error */

		int err_line  = lexer.getLine();

		report_error("ERROR" + "(" + err_line + ")", PARSING_ERROR);
	}

	public void report_error(String message, Object info)
	{
		if ((int) info == PARSING_ERROR){

			/* error is syntactic (we were called from the 'syntax_error' method */

			System.out.print("Parsing ");
			
		}
		else{
			/* error is lexical */

			System.out.print("Lexical ");
		}

		System.out.println("Error at " + "[" + lexer.getLine() + ":" + lexer.getTokenStartPosition() + "]");

		file_writer.print(message);
		file_writer.close();

		System.exit(0);
	}

	public int getLine()
	{
		return this.lexer.getLine();
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	try{
		Symbol s;
		s = lexer.next_token();

		System.out.println(TokenNames.terminalNames[s.sym]);

		return s;
	}	
	catch(Throwable e)
	{	
		report_error("ERROR", LEXICAL_ERROR);
	}

	// Won't get here
	return null;	
:};

/*******************************/
/* 			TERMINALS          */
/*******************************/

/* --------- Operators --------*/
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LT;
terminal GT;
terminal ASSIGN;

/* ---------- */

terminal IF;
terminal WHILE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal NIL;
terminal COMMA;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal NEW;
terminal TYPE_STRING;


/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;


/*****************/
/* NON TERMINALS */
/*****************/

non terminal AST_PROGRAM Program;
non terminal AST_DEC_LIST decList; 
non terminal AST_DEC dec;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_ARRAYTYPEDEF arrayTypedef;
non terminal AST_TYPE type;
non terminal AST_EXP exp;
non terminal AST_NEWEXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_STMT_LIST stmtList;
non terminal AST_EXP_LIST expList;
non terminal AST_TYPE_LIST typeList;
non terminal AST_STMT stmt;
non terminal AST_VAR var;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

Program		::=		decList:l				{: RESULT = new AST_PROGRAM(l, getLine());    :}
					;

decList		::=		dec:d   decList:dl				{: RESULT = new AST_DEC_LIST(d, dl, getLine());    :}
					| dec:d   						{: RESULT = new AST_DEC_LIST(d, null, getLine());    :}
					;

dec			::=		varDec:v				{: RESULT = new AST_DEC(v, 0, getLine());    :}
					| funcDec:f				{: RESULT = new AST_DEC(f, 1, getLine());    :}
					| classDec:c			{: RESULT = new AST_DEC(c, 2, getLine());    :}
					| arrayTypedef:a		{: RESULT = new AST_DEC(a, 3, getLine());    :}
					;

type		::=		TYPE_INT		{: RESULT = new AST_TYPE(0, null, getLine());    :}
					| TYPE_STRING	{: RESULT = new AST_TYPE(1, null, getLine());    :}
					| TYPE_VOID		{: RESULT = new AST_TYPE(2, null, getLine());    :}
					| ID:name		{: RESULT = new AST_TYPE(3, name, getLine());    :}
					;

arrayTypedef::=		ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON		{: RESULT = new AST_ARRAYTYPEDEF(name,t, getLine());    :}
					;

varDec		::=		type:t ID:name SEMICOLON					{: RESULT = new AST_VARDEC_EXP(t, name, null, getLine());    :}
					| type:t ID:name ASSIGN exp:e SEMICOLON		{: RESULT = new AST_VARDEC_EXP(t, name, e, getLine());    :}
					| type:t ID:name ASSIGN newExp:e SEMICOLON	{: RESULT = new AST_VARDEC_NEWEXP(t, name, e, getLine());    :}
					;

funcDec		::=		type:t ID:func_name LPAREN RPAREN LBRACE stmtList:body RBRACE				{: RESULT = new AST_FUNCDEC(t, func_name, null, body, getLine());    :}
					|type:t ID:func_name LPAREN typeList:params_types RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_FUNCDEC(t, func_name, params_types, body, getLine());    :}
					;

classDec	::=		CLASS ID:class_name LBRACE cFieldList:fields RBRACE						{: RESULT = new AST_CLASSDEC(class_name, null, fields, getLine());    :}
					| CLASS ID:class_name EXTENDS ID:super_class LBRACE cFieldList:fields RBRACE	{: RESULT = new AST_CLASSDEC(class_name, super_class, fields, getLine());    :}
					;

newExp  	::=		NEW type:t 								{: RESULT = new AST_NEWEXP(t, null, getLine());    :}
					| NEW type:t LBRACK exp:e RBRACK			{: RESULT = new AST_NEWEXP(t, e, getLine());    :}
					;

cField  	::=		varDec:vd 								{: RESULT = new AST_CFIELD_VARDEC(vd, getLine());    :}
					| funcDec:vd 							{: RESULT = new AST_CFIELD_FUNDEC(vd, getLine());    :}
					;

cFieldList	::=		cField:c	cFieldList:l		{: RESULT = new AST_CFIELD_LIST(c,l, getLine());    :}
					| cField:c						{: RESULT = new AST_CFIELD_LIST(c,null, getLine()); :}
					;

expList		::=		exp:e COMMA	expList:li		{: RESULT = new AST_EXP_LIST(e,li, getLine());    :}
					| exp:e						{: RESULT = new AST_EXP_LIST(e,null, getLine()); :}
					;

typeList	::=		type:t ID:name COMMA typeList:tl		{: RESULT = new AST_TYPE_LIST(t, name, tl, getLine());    :}
					| type:t ID:name						{: RESULT = new AST_TYPE_LIST(t, name, null, getLine()); :}
					;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l, getLine());    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null, getLine()); :}
					;


var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name, getLine());       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName, getLine()); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e, getLine());     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e, getLine());	 :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body, getLine()); 	:}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body, getLine()); 	:}
					| varDec:vd													{: RESULT = new AST_STMT_VARDEC(vd, getLine()); 	:}
					| var:v ASSIGN newExp:ne SEMICOLON							{: RESULT = new AST_STMT_ASSIGN_NEWEXP(v,ne, getLine()); 	:}
					| RETURN SEMICOLON											{: RESULT = new AST_STMT_RETURN(null, getLine()); 		:}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN(e, getLine()); 	:}
					| ID:name LPAREN RPAREN SEMICOLON								{: RESULT = new AST_STMT_FUNCCALL(null, name, null, getLine()); 	:}
					| var:v DOT ID:func_name LPAREN RPAREN SEMICOLON						{: RESULT = new AST_STMT_FUNCCALL(v, func_name, null, getLine()); 	:}
					| ID:func_name LPAREN expList:args RPAREN SEMICOLON					{: RESULT = new AST_STMT_FUNCCALL(null, func_name, args, getLine()); 	:}
					| var:v DOT ID:func_name LPAREN expList:args RPAREN SEMICOLON			{: RESULT = new AST_STMT_FUNCCALL(v, func_name, args, getLine()); 	:}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i, 0, getLine());          :}
					| MINUS INT:i						{: RESULT = new AST_EXP_INT(i, 1, getLine());          :}
					| STRING:s							{: RESULT = new AST_EXP_STRING(s, getLine());          :}
					| NIL								{: RESULT = new AST_EXP_NIL(getLine());          :}
					| var:v								{: RESULT = new AST_EXP_VAR(v, getLine());          :}
					| exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0, getLine());		:}
					| exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1, getLine());		:}
					| exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2, getLine());		:}
					| exp:e1 DIVIDE exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 3, getLine());		:}
					| exp:e1 LT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 4, getLine());		:}
					| exp:e1 GT exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 5, getLine());		:}
					| exp:e1 EQ exp:e2					{: RESULT = new AST_EXP_BINOP(e1, e2, 6, getLine());		:}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_PARENEXP(e, getLine());		:}
					| ID:func_name LPAREN RPAREN				{: RESULT = new AST_EXP_FUNCCALL(null, func_name, null, getLine());		:}
					| var:v DOT ID:func_name LPAREN RPAREN		{: RESULT = new AST_EXP_FUNCCALL(v, func_name, null, getLine());		:}
					| ID:func_name LPAREN expList:args RPAREN		{: RESULT = new AST_EXP_FUNCCALL(null, func_name, args, getLine());		:}
					| var:v DOT ID:func_name LPAREN expList:args RPAREN		{: RESULT = new AST_EXP_FUNCCALL(v, func_name, args, getLine());		:}
					;
